<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Find Products Store ID" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://www.tgtappdata.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache/><con:endpoints><con:endpoint>http://www.tgtappdata.com</con:endpoint></con:endpoints><con:resource name="StoreId" path="/v1/products/find/{id-type}/{id}/{storeId}"><con:settings/><con:parameters><con:parameter><con:name>id-type</con:name><con:value>id-type</con:value><con:style>TEMPLATE</con:style><con:default>id-type</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>id</con:name><con:value>id</con:value><con:style>TEMPLATE</con:style><con:default>id</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>storeId</con:name><con:value>storeId</con:value><con:style>TEMPLATE</con:style><con:default>storeId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="StoreId" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="Find Products Store ID" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v1/products/find/DPCI/007-08-0747/1375</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="085239152485"/>
  <con:entry key="id-type" value="BARCODE"/>
  <con:entry key="storeId" value="1375"/>
</con:parameters><con:parameterOrder><con:entry>id-type</con:entry><con:entry>id</con:entry><con:entry>storeId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite name="Find Products"><con:description>TestSuite generated for REST Service [http://www.tgtappdata.com]</con:description><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Find Products" searchProperties="true" id="384087d3-467d-4294-a9a1-fc2540a696d6"><con:description>TestCase generated for REST Resource [StoreId] located at [/v1/products/find/{id-type}/{id}/{storeId}]</con:description><con:settings/><con:testStep type="properties" name="Find Products DS"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>type</con:name><con:value>TCIN</con:value></con:property><con:property><con:name>typeId</con:name><con:value>14525463</con:value></con:property><con:property><con:name>storeId</con:name><con:value>20</con:value></con:property><con:property><con:name>Ignore</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Find Products"><con:settings/><con:config service="http://www.tgtappdata.com" resourcePath="/v1/products/find/{id-type}/{id}/{storeId}" methodName="StoreId" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Find Products" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v1/products/find/DPCI/007-08-0747/1375</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="id" value="${Find Products DS#typeId}"/>
  <con:entry key="id-type" value="${Find Products DS#type}"/>
  <con:entry key="storeId" value="${Find Products DS#storeId}"/>
</con:parameters><con:parameterOrder><con:entry>id-type</con:entry><con:entry>id</con:entry><con:entry>storeId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Find Products GS"><con:settings/><con:config><script><![CDATA[import javax.swing.*;
import com.eviware.soapui.support.*
import groovy.json.JsonSlurper

servicePath = "/jenkins/Services/"
servicePath = "C:/Target Automation/Services/"

String filename 
String errPath = servicePath + "Output/Errors/"
filename = errPath + "Failure.log" 
Boolean fileSuccessfullyDeleted = new File(filename).delete()
//---------------------------------------------------------------
validate_Populated_Response_Values( "Find Products", "products" )
//---------------------------------------------------------------
File f = new File( filename );
if(f.exists()){
	String MainErrfilename = errPath + "All_Failures.html"
	String fileContent = ReadFile( filename )
	String [] arrValues = fileContent.split(",")
	String varLine, varLines
	varLines = ""
	if( fileContent.length() > 0 )
	{
		for( intArrayIndex = 0; intArrayIndex < arrValues.length; intArrayIndex++ )
		{
			varLine = arrValues[intArrayIndex]
			firstChar = varLine[0]
			if( firstChar == "~" ) varLines = varLines + "<hr>";
			if( firstChar == "~" || firstChar == "(" || firstChar == "[" )
			{
				varLine = varLine.substring( 1, varLine.length() );
			}
			switch(firstChar)
			{
				case "~":	varLine = "<a style='font-family:Candara;font-size:20px;color:Orange;'>" + varLine + "</a><br>"; break;
				case "(":	varLine = "<a style='font-family:Candara;font-size:15px;color:blue;'>" + varLine + "</a><br>"; break; 
				case "[":	varLine = "<a style='font-family:Candara;font-size:15px;color:purple;'>" + varLine + "</a><br>"; break;
				default: varLine = "<a style='font-family:Candara;font-size:15px;color:#005A1A;'>" + varLine + "</a><br>"; break;
			}
			if( varLine.indexOf("[COMMA]") >= 0 )
				varLine = varLine.replace( "[COMMA]", "," );
			varLines = varLines + varLine
		}
		AddTextToFile( MainErrfilename, varLines, true )
	}
}		
//=====================================================================================
public void validate_Populated_Response_Values( String var_Service, String var_Branch ) 
//=====================================================================================
{
	String testResult
	String title = "",
		  dpci = "",
		  tcin = "",
		  departmentId = "",
		  storeId = "",
		  channelAvailabilityCode = "",
		  onlinePrice = "",
		  onlinePriceText = "",
		  onlineAvailabilityCode = "",
		  currentStorePrice = "",
		  originalStorePrice = "",
		  priceCurrency = "",
		  storeAvailabilityCode = "",
		  images = "",
		  locations = "",
		  averageRating = "",
		  reviewCount = ""

	String Type, TypeID, StoreID;

	String varLines = copyFileToArray( servicePath + "RedSky.srv", var_Service )
	//JOptionPane.showMessageDialog( null, "varLines: " + varLines );

	String [] testResultArray;	
	String [] arrLines = varLines.split("~")
	String [] arrColumns;
	String [] arrParams;
	String [] arrServiceValues;
		
	Integer iArrayColumnIndex;
	String varColumns, varColumn;
	String varValues, varValue; 
	String varParams, varParam;
	varValues = ""
	//---------------------------
	// Collect Columns and Values
	//---------------------------
	for( iArrayIndex = 0; iArrayIndex < arrLines.length-1; iArrayIndex++ )
	{
		varValue = arrLines[iArrayIndex]	
		if( iArrayIndex == 0 ) arrColumns = varValue.split(",");
		else if( iArrayIndex > 0) varValues = varValues + varValue + "~";
	}
	//JOptionPane.showMessageDialog( null, "arrColumns: " + arrColumns );
	//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
	varValues = varValues.substring(0, varValues.length() - 1 )
	//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
	arrServiceValues = varValues.split("~");
	//--------------------
	// Populate Parameters
	//--------------------
	WebServiceProps = testRunner.testCase.getTestStepByName( var_Service + " DS" );
	for( iArrayIndex = 0; iArrayIndex < arrServiceValues.length; iArrayIndex++ )
	{
		for( iArrayColumnIndex = 0; iArrayColumnIndex < arrColumns.length; iArrayColumnIndex++ )
		{
			varColumn = arrColumns[iArrayColumnIndex]
			varParams = arrServiceValues[iArrayIndex]
			arrParams = varParams.split(",")
			varParam = arrParams[iArrayColumnIndex]
			varParam = varParam.trim();
			switch(varColumn.trim())
			{
				case "type":
					WebServiceProps.setPropertyValue( "type", varParam );
					Type = WebServiceProps.getPropertyValue( "type" );
					break;
				case "typeId":
					WebServiceProps.setPropertyValue( "typeId", varParam );
					TypeID = WebServiceProps.getPropertyValue( "typeId" );
					break;
				case "storeId":
					WebServiceProps.setPropertyValue( "storeId", varParam );
					StoreID = WebServiceProps.getPropertyValue( "storeId" );
					break;
				case "Ignore":
					WebServiceProps.setPropertyValue( "Ignore", varParam );
					Ignore = WebServiceProps.getPropertyValue( "Ignore" );
					break;
			}
		}
		if( Ignore != "Y" )
		{
			if( Type.length() == 0 )
			{
				JOptionPane.showMessageDialog( null, "Type is empty" );
				break;
			}	
			//-----------------
			// Collect Response
			//-----------------
			//JOptionPane.showMessageDialog( null, "Here" );
			testRunner.runTestStepByName(var_Service);
			String Response = testRunner.testCase.testSteps[ var_Service ].testRequest.response.contentAsString
			//JOptionPane.showMessageDialog( null, Response );
			//--------------------------
			// Collect Items to validate
			//--------------------------
			String var_Items = ReadFile( servicePath + var_Service + "/" + var_Branch + " - nodes to validate.txt" )
			String [] arr_Items = var_Items.split(",")
			Integer int_Index = 0
			def arr_subItem, var_Element, var_subItem_Type, subItemName, s_subItem, i_subItem, l_subItem
			//--------------------------------
			// Split JSON per specified Branch
			//--------------------------------
			List<Map> parsedData = (List<Map>)new JsonSlurper().parseText( Response );  
			for ( Map aObject : parsedData )
			{ 
				//---------------------------------------
				// Loop through User defined check points
				//---------------------------------------
				while(int_Index < arr_Items.length )
				{
					//-----------------------------------------------------------
					// Collect Node Type (Integer, String or  List) and Node Name
					//-----------------------------------------------------------
					var_Element = arr_Items[int_Index].trim()
					arr_subItem = var_Element.split("_")
					var_subItem_Type = arr_subItem[0]
					subItemName = arr_subItem[1]
					int_Index = int_Index + 1
					//-----------------------------------
					// ignore reporting on specified Node
					//-----------------------------------
					if( var_Element[0] != "'" )
					{
						Object fieldValue = aObject.get(subItemName)
						
						if( subItemName == "title" )
						{ 
							title = fieldValue;
							if( title != null )
								if( title.indexOf(",") >= 0 )
	    								title = title.replace( ",", "[COMMA]" );
 						}	
						if( subItemName == "dpci" ) dpci = fieldValue;
						if( subItemName == "tcin" ) tcin = fieldValue;
						if( subItemName == "departmentId" ) departmentId = fieldValue;
						if( subItemName == "description" ) description = fieldValue;
						if( subItemName == "storeId" ) storeId = fieldValue;
						if( subItemName == "cartwheelOffers" ) cartwheelOffers = fieldValue;
						if( subItemName == "channelAvailabilityCode" ) channelAvailabilityCode = fieldValue; 
						if( subItemName == "onlinePrice" ) onlinePrice = fieldValue;
						if( subItemName == "onlinePriceText" ) onlinePriceText = fieldValue;
						if( subItemName == "onlineAvailabilityCode" ) onlineAvailabilityCode = fieldValue;
						if( subItemName == "storePriceStatusCode" ) storePriceStatusCode = fieldValue;
						if( subItemName == "currentStorePrice" ) currentStorePrice = fieldValue;
						if( subItemName == "originalStorePrice" ) originalStorePrice = fieldValue;
						if( subItemName == "priceCurrency" ) priceCurrency = fieldValue;
						if( subItemName == "storePromotionExists" ) storePromotionExists = fieldValue;
						if( subItemName == "storeAvailabilityCode" ) storeAvailabilityCode = fieldValue;
						if( subItemName == "images" ) images = fieldValue;
						if( subItemName == "locations" ) locations = fieldValue;
						if( subItemName == "averageRating" ) averageRating = fieldValue;
						if( subItemName == "reviewCount" ) reviewCount = fieldValue;
						if( subItemName == "categoryId" ) categoryId = fieldValue;
						if( subItemName == "categoryName" ) categoryName = fieldValue;
				 	}
				}
				/*
				String responsevalues = 
					"\ntitle: " + title +
					"\ndpci: " + dpci +
					"\ntcin: " + tcin +
					"\ndepartmentId: " + departmentId + 
					"\ndescription: " + description +
					"\nstoreId: " + storeId +
					"\ncartwheelOffers: " + cartwheelOffers + 
					"\nchannelAvailabilityCode: " + channelAvailabilityCode +
					"\nonlinePrice: " + onlinePrice +
					"\nonlinePriceText: " + onlinePriceText +
					"\nonlineAvailabilityCode: " + onlineAvailabilityCode +
					"\nstorePriceStatusCode: " + storePriceStatusCode +
					"\ncurrentStorePrice: " + currentStorePrice +
					"\noriginalStorePrice: " + originalStorePrice +
					"\npriceCurrency: " + priceCurrency +
					"\nstorePromotionExists: " + storePromotionExists +
					"\nstoreAvailabilityCode: " + storeAvailabilityCode +
					"\nlocations: " + locations +
					"\naverageRating: " + averageRating +
					"\nreviewCount: " + reviewCount +
					"\ncategoryId: " + categoryId +
					"\ncategoryName: " + categoryName
	
			   	JOptionPane.showMessageDialog( null, responsevalues );
				*/
			   	testResult = CheckResponseValues(	Type, 
			   								title,
											dpci,
											tcin,
											departmentId,
											storeId,
											channelAvailabilityCode,
											onlinePrice,
											onlinePriceText,
											onlineAvailabilityCode,
											currentStorePrice,
											originalStorePrice,
											priceCurrency,
											storeAvailabilityCode,
											images,
											locations,
											averageRating,
											reviewCount )
			   	//JOptionPane.showMessageDialog( null, testResult );
	
			   	testResultArray = testResult.split("~")
				if( testResult.length() > 0 )
			   	{
					AddTextToFile( servicePath + "Output/Errors/Failure.log", "~Service (" + var_Service + ") Type (" + Type + ") Type ID (" + TypeID + ") Store ID (" + StoreID + ") dpci (" + dpci + ")", true )
					for( intArrayIndex = 0; intArrayIndex < testResultArray.length; intArrayIndex++)
					{
					   	//JOptionPane.showMessageDialog( null, testResultArray[intArrayIndex] );
						AddTextToFile( servicePath + "Output/Errors/Failure.log", testResultArray[intArrayIndex], true )
					}	
			   	}
				int_Index = 0;
			}
		}
	}		
}
//===========================================================================
public static void AddTextToFile( String sFile, String sText, boolean bAppend )
//===========================================================================
{
    	FileWriter fstream = new FileWriter( sFile, bAppend );
     BufferedWriter out = new BufferedWriter( fstream );
     out.write(sText);
     out.newLine();   
     out.close();
}
//===========================================
public static String ReadFile( String sFile )
//===========================================
{
    	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	
	String sLine, var_Lines, arr_Lines
	var_Lines = ""
    	sLine = reader.readLine()
  	while ( sLine != null ) 
    	{
	    	var_Lines = var_Lines + sLine + ","
	    	sLine = reader.readLine()
	} 
	var_Lines = var_Lines.substring(0, var_Lines.length() - 1 )
	return var_Lines 
}
//==========================================================
String CheckResponseValues( 	String Type, 
			   			String title,
						String dpci,
						String tcin,
						String departmentId,
						String storeId,
						String channelAvailabilityCode,
						String onlinePrice,
						String onlinePriceText,
						String onlineAvailabilityCode,
						String currentStorePrice,
						String originalStorePrice,
						String priceCurrency,
						String storeAvailabilityCode,
						String images,
						String locations,
						String averageRating,
						String reviewCount )
//==========================================================
{
	String testResult = "";

	if( title == null ) testResult = testResult + "title must not be null~";
	if( dpci == null ) testResult = testResult + "dpci must not be null~";
	if( tcin == null ) testResult = testResult + "tcin must not be null~";
	if( departmentId == null ) testResult = testResult + "departmentId must not be null~";
	if( storeId == null ) testResult = testResult + "storeId must not be null~";
	if( channelAvailabilityCode == null ) testResult = testResult + "channelAvailabilityCode must not be null~";
	if( onlinePrice == null ) testResult = testResult + "onlinePrice must not be null~";
	if( onlinePriceText == null ) testResult = testResult + "onlinePriceText must not be null~";
	if( onlineAvailabilityCode == null ) testResult = testResult + "onlineAvailabilityCode must not be null~";
	if( currentStorePrice == null ) testResult = testResult + "currentStorePrice must not be null~";
	if( originalStorePrice == null ) testResult = testResult + "originalStorePrice must not be null~";
	if( priceCurrency == null ) testResult = testResult + "priceCurrency must not be null~";
	if( storeAvailabilityCode == null ) testResult = testResult + "storeAvailabilityCode must not be null~";
	if( images == null ) testResult = testResult + "images must not be null~";
	if( locations == null ) testResult = testResult + "locations must not be null~";
	if( averageRating == null ) testResult = testResult + "averageRating must not be null~";
	if( reviewCount == null ) testResult = testResult + "reviewCount must not be null~";

	return testResult
}
//==================================================================
public static String copyFileToArray( String sFile, String service )
//==================================================================
{
	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	String sLine, varLines, arrLines
	Boolean bCollect = false
	varLines = ""
    	sLine = reader.readLine()
    	sLine = sLine.trim();
  	while ( sLine != null ){
    		if( bCollect == true ) varLines = varLines + sLine + "~";
    		if( sLine == service ) bCollect = true;
    		if( bCollect == true && sLine[0] == "-" ) {bCollect = false;	break;}
	    	sLine = reader.readLine();
	    	sLine = sLine.trim();
	} 
	varLines = varLines.substring(0, varLines.length() - 1 )

	return varLines; 
}
]]></script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>
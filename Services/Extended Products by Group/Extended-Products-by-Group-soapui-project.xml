<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Extended Products by Group" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://www.tgtappdata.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://www.tgtappdata.com</con:endpoint></con:endpoints><con:resource name="StoreId" path="/v1/products/groups/extended/{groupName}/{storeId}"><con:settings/><con:parameters><con:parameter><con:name>groupName</con:name><con:value>groupName</con:value><con:style>TEMPLATE</con:style><con:default>groupName</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>storeId</con:name><con:value>storeId</con:value><con:style>TEMPLATE</con:style><con:default>storeId</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Extended Products by Group" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/html; charset=utf-8</con:mediaType><con:status>407</con:status><con:params/><con:element>html</con:element></con:representation><con:representation type="RESPONSE"><con:mediaType xsi:nil="true"/><con:status>0</con:status><con:params/><con:element>data</con:element></con:representation><con:representation type="FAULT"><con:mediaType>text/plain; charset=UTF-8</con:mediaType><con:status>404</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="Extended Products by Group" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v1/products/groups/extended/top-deals/1375</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="cartwheel:furniture"/>
  <con:entry key="storeId" value="1375"/>
</con:parameters><con:parameterOrder><con:entry>groupName</con:entry><con:entry>storeId</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite name="Extended Products by Group TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Extended Products by Group TC" searchProperties="true" id="461252aa-7e58-46ea-b697-a5be9a5091d2"><con:settings/><con:testStep type="properties" name="Extended Products by Group DS"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>groupName</con:name><con:value>top-deals:small-electronics</con:value></con:property><con:property><con:name>storeId</con:name><con:value>2799</con:value></con:property><con:property><con:name>Ignore</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Extended Products by Group"><con:settings/><con:config service="http://www.tgtappdata.com" resourcePath="/v1/products/groups/extended/{groupName}/{storeId}" methodName="Extended Products by Group" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Extended Products by Group" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v1/products/groups/extended/top-deals/1375</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="groupName" value="${Extended Products by Group DS#groupName}"/>
  <con:entry key="storeId" value="${Extended Products by Group DS#storeId}"/>
</con:parameters><con:parameterOrder><con:entry>groupName</con:entry><con:entry>storeId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Extended Products by Group GS"><con:settings/><con:config><script><![CDATA[import javax.swing.*;
import com.eviware.soapui.support.*
import groovy.json.JsonSlurper

servicePath = "/jenkins/Services/"
//servicePath = "C:/Target Automation/Services/"

String filename 
String errPath = servicePath + "Output/Errors/"
filename = errPath + "Failure.log" 
Boolean fileSuccessfullyDeleted = new File(filename).delete()
//----------------------------------------------------------------------------
validate_Populated_Response_Values( "Extended Products by Group", "products" )
//----------------------------------------------------------------------------
File f = new File( filename );
if(f.exists()){
	String MainErrfilename = errPath + "All_Failures.html"
	String fileContent = ReadFile( filename )
	String [] arrValues = fileContent.split(",")
	String varLine, varLines
	varLines = ""
	Integer intCount = 0;
	
	if( fileContent.length() > 0 )
	{
		for( intArrayIndex = 0; intArrayIndex < arrValues.length; intArrayIndex++ )
		{
			varLine = arrValues[intArrayIndex]
			firstChar = varLine[0]
			if( firstChar == "~" ) varLines = varLines + "<hr>";
			if( firstChar == "~" || firstChar == "(" || firstChar == "[" )
			{
				varLine = varLine.substring( 1, varLine.length() );
			}
			switch(firstChar)
			{
				case "~":	varLine = "<a style='font-family:Candara;font-size:20px;color:Orange;'>" + varLine + "</a><br>"; break;
				case "(":	varLine = "<a style='font-family:Candara;font-size:15px;color:blue;'>" + varLine + "</a><br>"; break; 
				case "[":	varLine = "<a style='font-family:Candara;font-size:15px;color:purple;'>" + varLine + "</a><br>"; break;
				default: varLine = "<a style='font-family:Candara;font-size:15px;color:#005A1A;'>" + varLine + "</a><br>"; break;
			}
			if( varLine.indexOf("[COMMA]") >= 0 )
				varLine = varLine.replace( "[COMMA]", "," );
			varLines = varLines + varLine
		}
		AddTextToFile( MainErrfilename, varLines, true )
	}
}		
//=====================================================================================
public void validate_Populated_Response_Values( String var_Service, String var_Branch ) 
//=====================================================================================
{
	String testResult
	String title = "",
		  dpci = "",
		  tcin = "",
		  departmentId = "",
		  storeId = "",
		  cartwheelOffers = "",
		  channelAvailabilityCode = "",
		  onlinePrice = "",
		  onlinePriceText = "",
		  onlineAvailabilityCode = "",
		  priceCurrency = "",
		  storePromotionExists = "",
		  images = "",
		  categoryId = "",
		  categoryName = ""

	String GroupName, StoreID;
	String varLines = copyFileToArray( servicePath + "RedSky.srv", var_Service )
	//JOptionPane.showMessageDialog( null, "varLines: " + varLines );

	String [] testResultArray;	
	String [] arrLines = varLines.split("~")
	String [] arrColumns;
	String [] arrParams;
	String [] arrServiceValues;
		
	Integer iArrayColumnIndex;
	String varColumns, varColumn;
	String varValues, varValue; 
	String varParams, varParam;
	varValues = ""
	//---------------------------
	// Collect Columns and Values
	//---------------------------
	for( iArrayIndex = 0; iArrayIndex < arrLines.length-1; iArrayIndex++ )
	{
		varValue = arrLines[iArrayIndex]	
		if( iArrayIndex == 0 ) arrColumns = varValue.split(",");
		else if( iArrayIndex > 0) varValues = varValues + varValue + "~";
	}
	//JOptionPane.showMessageDialog( null, "arrColumns: " + arrColumns );
	//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
	varValues = varValues.substring(0, varValues.length() - 1 )
	//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
	arrServiceValues = varValues.split("~");
	//--------------------
	// Populate Parameters
	//--------------------
	WebServiceProps = testRunner.testCase.getTestStepByName( var_Service + " DS" );
	for( iArrayIndex = 0; iArrayIndex < arrServiceValues.length; iArrayIndex++ )
	{
		for( iArrayColumnIndex = 0; iArrayColumnIndex < arrColumns.length; iArrayColumnIndex++ )
		{
			varColumn = arrColumns[iArrayColumnIndex]
			varParams = arrServiceValues[iArrayIndex]
			arrParams = varParams.split(",")
			varParam = arrParams[iArrayColumnIndex]
			varParam = varParam.trim();
			switch(varColumn.trim())
			{
				case "Ignore":
					WebServiceProps.setPropertyValue( "Ignore", varParam );
					Ignore = WebServiceProps.getPropertyValue( "Ignore" );
					break;
				case "groupName":
					WebServiceProps.setPropertyValue( "groupName", varParam );
					GroupName = WebServiceProps.getPropertyValue( "groupName" );
					break;
				case "storeId":
					WebServiceProps.setPropertyValue( "storeId", varParam );
					StoreID = WebServiceProps.getPropertyValue( "storeId" );
					break;
			}
		}
		if( Ignore != "Y" )
		{
			if( GroupName.length() == 0 )
			{
				JOptionPane.showMessageDialog( null, "Group Name is empty" );
				break;
			}	
			if( StoreID.length() == 0 )
			{
				JOptionPane.showMessageDialog( null, "Store ID is empty" );
				break;
			}	
			//-----------------
			// Collect Response
			//-----------------
			testRunner.runTestStepByName(var_Service);
			String Response = testRunner.testCase.testSteps[ var_Service ].testRequest.response.contentAsString
			//JOptionPane.showMessageDialog( null, Response );
			//--------------------------
			// Collect Items to validate
			//--------------------------
			String var_Items = ReadFile( servicePath + var_Service + "/" + var_Branch + " - nodes to validate.txt" )
			String [] arr_Items = var_Items.split(",")
			Integer int_Index = 0
			def arr_subItem, var_Element, var_subItem_Type, subItemName, s_subItem, i_subItem, l_subItem
			//--------------------------------
			// Split JSON per specified Branch
			//--------------------------------
			List<Map> parsedData = (List<Map>)new JsonSlurper().parseText( Response );  
			for ( Map aObject : parsedData )
			{ 
				//---------------------------------------
				// Loop through User defined check points
				//---------------------------------------
				while(int_Index < arr_Items.length )
				{
					//-----------------------------------------------------------
					// Collect Node Type (Integer, String or  List) and Node Name
					//-----------------------------------------------------------
					var_Element = arr_Items[int_Index].trim()
					arr_subItem = var_Element.split("_")
					var_subItem_Type = arr_subItem[0]
					subItemName = arr_subItem[1]
					int_Index = int_Index + 1
					//-----------------------------------
					// ignore reporting on specified Node
					//-----------------------------------
					if( var_Element[0] != "'" )
					{
						String fieldValue = aObject.get(subItemName)

						//JOptionPane.showMessageDialog(null, subItemName + " = " + fieldValue );
						if( subItemName == "title" )
						{ 
							title = fieldValue;
							if( title != null )
								if( title.indexOf(",") >= 0 )
	    								title = title.replace( ",", "[COMMA]" );
 						}	
						if( subItemName == "dpci" ) dpci = fieldValue;
						if( subItemName == "tcin" ) tcin = fieldValue;
						if( subItemName == "departmentId" ) departmentId = fieldValue;
						if( subItemName == "storeId" ) storeId = fieldValue;
						if( subItemName == "cartwheelOffers" ) cartwheelOffers = fieldValue;
						if( subItemName == "channelAvailabilityCode" ) channelAvailabilityCode = fieldValue; 
						if( subItemName == "onlinePrice" ) onlinePrice = fieldValue;
						if( subItemName == "onlinePriceText" ) onlinePriceText = fieldValue;
						if( subItemName == "onlineAvailabilityCode" ) onlineAvailabilityCode = fieldValue;
						if( subItemName == "priceCurrency" ) priceCurrency = fieldValue;
						if( subItemName == "storePromotionExists" ) storePromotionExists = fieldValue;
						if( subItemName == "images" ) images = fieldValue;
						if( subItemName == "categoryId" ) categoryId = fieldValue;
						if( subItemName == "categoryName" ) categoryName = fieldValue;
				 	}
				}
			   	testResult = CheckResponseValues(	GroupName, 
			   								title,
											dpci,
											tcin,
											departmentId,
											storeId,
											cartwheelOffers,
											channelAvailabilityCode,
											onlinePrice,
											onlinePriceText,
											onlineAvailabilityCode,
											priceCurrency,
											storePromotionExists,
											images,
											categoryId,
											categoryName )
			   	testResultArray = testResult.split("~")
				if( testResult.length() > 0 )
			   	{
					AddTextToFile( servicePath + "Output/Errors/Failure.log", "~Service (" + var_Service + ")", true )
					AddTextToFile( servicePath + "Output/Errors/Failure.log", "[Group Name (" + GroupName + ") Store ID (" + StoreID + ") dpci (" + dpci + ") title (" + title + ")", true )
					for( intArrayIndex = 0; intArrayIndex < testResultArray.length; intArrayIndex++)
					{
					   	//JOptionPane.showMessageDialog( null, testResultArray[intArrayIndex] );
						AddTextToFile( servicePath + "Output/Errors/Failure.log", testResultArray[intArrayIndex], true )
					}	
			   	}
				int_Index = 0;
			}
		}
	}		
}
//===========================================================================
public static void AddTextToFile( String sFile, String sText, boolean bAppend )
//===========================================================================
{
    	FileWriter fstream = new FileWriter( sFile, bAppend );
     BufferedWriter out = new BufferedWriter( fstream );
     out.write(sText);
     out.newLine();   
     out.close();
}
//===========================================
public static String ReadFile( String sFile )
//===========================================
{
    	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	
	String sLine, var_Lines, arr_Lines
	var_Lines = ""
    	sLine = reader.readLine()
  	while ( sLine != null ) 
    	{
	    	var_Lines = var_Lines + sLine + ","
	    	sLine = reader.readLine()
	} 
	var_Lines = var_Lines.substring(0, var_Lines.length() - 1 )
	return var_Lines 
}
//==========================================================
String CheckResponseValues( 	String GroupName, 
						String title,
						String dpci,
						String tcin,
						String departmentId,
						String storeId,
						String cartwheelOffers,
					  	String channelAvailabilityCode,
						String onlinePrice,
						String onlinePriceText,
						String onlineAvailabilityCode,
						String priceCurrency,
						String storePromotionExists,
						String images,
						String categoryId,
						String categoryName )
//==========================================================
{
	String testResult = "";

	//JOptionPane.showMessageDialog(null, "onlineAvailabilityCode = " + onlineAvailabilityCode );

	if( title == null ) testResult = testResult + "title must not be null~";
	if( dpci == null ) testResult = testResult + "dpci must not be null~";
	if( tcin == null ) testResult = testResult + "tcin must not be null~";
	if( departmentId == null ) testResult = testResult + "departmentId must not be null~";
	if( storeId == null ) testResult = testResult + "storeId must not be null~";
	//----------------------------------------------------------------------
	if( GroupName.indexOf("top-deals") == -1 )
		if( cartwheelOffers == null ) 
			testResult = testResult + "cartwheelOffers must not be null~";
	//----------------------------------------------------------------------
	if( channelAvailabilityCode == null ) 
		testResult = testResult + "channelAvailabilityCode must not be null~";
	else if( channelAvailabilityCode != null && channelAvailabilityCode != "STORES_ONLY") 
	{
		if( onlinePrice == null ) testResult = testResult + "onlinePrice must not be null~";
		if( onlineAvailabilityCode == null ) testResult = testResult + "onlineAvailabilityCode must not be null~";
	}
	if( onlinePriceText == null) testResult = testResult + "onlinePriceText must not be null~";	
	if( priceCurrency == null ) testResult = testResult + "priceCurrency must not be null~";
	//---------------------------------------------------------------------------
	if( GroupName == "top-deals" )
		if( storePromotionExists == null ) 
			testResult = testResult + "storePromotionExists must not be null~";
	//---------------------------------------------------------------------------
	if( images == null ) testResult = testResult + "images must not be null~";
	if( categoryId == null ) testResult = testResult + "categoryId must not be null~";
	if( categoryName == null ) testResult = testResult + "categoryName must not be null";

	return testResult
}
//==================================================================
public static String copyFileToArray( String sFile, String service )
//==================================================================
{
	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	String sLine, varLines, arrLines
	Boolean bCollect = false
	varLines = ""
    	sLine = reader.readLine()
    	sLine = sLine.trim();
  	while ( sLine != null ){
    		if( bCollect == true ) varLines = varLines + sLine + "~";
    		if( sLine == service ) bCollect = true;
    		if( bCollect == true && sLine[0] == "-" ) {bCollect = false;	break;}
	    	sLine = reader.readLine();
	    	sLine = sLine.trim();
	} 
	varLines = varLines.substring(0, varLines.length() - 1 )

	return varLines; 
}

]]></script></con:config></con:testStep><con:testStep type="groovy" name="Groovy Script" disabled="true"><con:settings/><con:config><script>import jxl.*; 
import javax.swing.*;
import com.eviware.soapui.support.*
import groovy.json.JsonSlurper

String groupName, stores
Integer iIndexOfStartStores, iIndexOfEndStores, intStoreIndex

String [] arrStores

testRunner.runTestStepByName(var_Service);
			String Response = testRunner.testCase.testSteps[ var_Service ].testRequest.response.contentAsString

//String JSON_LINE = JSON_String( "C:/Target Automation/Services/JASON.log")
String JSON_LINE = ReadFile( "C:/Target Automation/Services/JSON.log")
JOptionPane.showMessageDialog( null, JSON_LINE );
List&lt;Map> parsedData = (List&lt;Map>)new JsonSlurper().parseText( JSON_LINE );  

AddTextToFile( "C:/Target Automation/Services/GroupName_Stores.csv", "", false )
for ( Map aObject : parsedData )
{
	Map productGroupDefinition = aObject.value
	String id = productGroupDefinition.id
	Map datedValue = productGroupDefinition.datedValues[0].value
	List&lt;String> storeIds = datedValue.storeIds
	groupName = "${id}"
	stores = "${storeIds}"
	iIndexOfStartStores = stores.indexOf("[") + 1
	iIndexOfEndStores = stores.indexOf("]");
	if( iIndexOfEndStores > iIndexOfStartStores)
	{
		stores = stores.substring( iIndexOfStartStores, iIndexOfEndStores )
		arrStores = stores.split(",")
		for( intStoreIndex = 0; intStoreIndex &lt; arrStores.length; intStoreIndex++ )
		{
			Store = arrStores[intStoreIndex].trim();
			AddTextToFile( "C:/Target Automation/Services/GroupName_Stores.csv", groupName + "," + Store, true )
		}
	}	
}
//==============================================
public static String JSON_String( String sFile )
//==============================================
{
	String JSON_LINE = ""
    	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	
	String sLine, var_Lines, arr_Lines
	var_Lines = ""
    	sLine = reader.readLine()
  	while ( sLine != null ) 
    	{
	    	JSON_LINE = JSON_LINE + sLine
	    	sLine = reader.readLine()
	} 
	return JSON_LINE 
}
//===========================================================================
public static void AddTextToFile( String sFile, String sText, boolean bAppend )
//===========================================================================
{
    	FileWriter fstream = new FileWriter( sFile, bAppend );
     BufferedWriter out = new BufferedWriter( fstream );
     out.write(sText);
     out.newLine();   
     out.close();
}
</script></con:config></con:testStep><con:testStep type="groovy" name="HTTP" disabled="true"><con:settings/><con:config><script>import jxl.*; 
import javax.swing.*;
import com.eviware.soapui.support.*
import groovy.json.JsonSlurper

String DPCI, store, expectedValue

DPCI = "007-07-0049"
store = "1375"

String URL = "https://api.target.com/products/v3/"+DPCI+"?fields=availability,descriptions,ids,images,item_hierarchies,pricing,reviews,in_store_locations&amp;key=wdEUlQIRuEKViqlEZY4kIEGcZZvCSw0X&amp;store_id="+store+"&amp;id_type=DPCI"
//JOptionPane.showMessageDialog( null, URL );

String JSONdata = URL.toURL().text

expectedValue = getItem_Expected_Value( JSONdata, "consolidated_overall_rating" )
//===============================================================
String getItem_Expected_Value( String JSONdata, String JSONitem )
//===============================================================
{
	Map result = new JsonSlurper().parseText( JSONdata )
	Map pcr = result.product_composite_response
	List items = pcr.items
	Map firstItem = items[0]
	List store_product = firstItem.store_product;
	Map online_price = firstItem.online_price;
	Map store_price = firstItem.store_price;
	Map review = firstItem.review;
	Map online_availability = firstItem.online_availability
	String expectedValue;
	switch(JSONitem)
	{
		case "consolidated_overall_rating": 	expectedValue = review.consolidated_overall_rating;		break;
		case "total_reviews":				expectedValue = review.total_reviews;					break;
		case "current_price_type_code":		expectedValue = store_product.price.current_price_type_code;break;
		case "current_price":				expectedValue = store_product.price.current_price;		break;
		case "original_price":				expectedValue = store_product.price.original_price;		break;
		case "display_original_price":		expectedValue = store_product.price.display_original_price;	break;
		case "op_current_price":				expectedValue = online_price.current_price;				break;
		case "op_original_price":			expectedValue = online_price.original_price;				break;
		case "sp_current_price":				expectedValue = store_price.current_price;				break;
		case "sp_original_price":			expectedValue = store_price.original_price;				break;
		case "item_status": 				expectedValue = online_availability.item_status;				break;
		case "availability_status":			expectedValue = online_availability.availability_status;		break;
		case "availability_code":			expectedValue = online_availability.availability_code;			break;
		case "available_quantity":			expectedValue = online_availability.available_quantity;		break;
		case "channel_availability_status":	expectedValue = online_availability.item_status;				break;
		case "channel_availability_code":		expectedValue = online_availability.channel_availability_code;	break;
		case "street_date":					expectedValue = online_availability.street_date;				break;
		case "launch_date":					expectedValue = online_availability.launch_date;				break;
	}	
	return expectedValue;
}
</script></con:config></con:testStep><con:loadTest name="Extended Products by Group LT"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>1</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type><con:config><testDelay>1000</testDelay><randomFactor>0.0</randomFactor></con:config></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval><con:reportParameters/></con:loadTest><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>f68e07c6-b0cc-46ed-95be-75d139f7296b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>
<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="Trending Products (composite)" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://www.tgtappdata.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://www.tgtappdata.com</con:endpoint></con:endpoints><con:resource name="Store" path="/v1/products/trending-composite/{store}"><con:settings/><con:parameters><con:parameter><con:name>store</con:name><con:value>store</con:value><con:style>TEMPLATE</con:style><con:default>store</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Store" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json;charset=UTF-8</con:mediaType><con:status>200</con:status><con:params/><con:element>Response</con:element></con:representation><con:request name="Composite" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v1/products/trending-composite/1375</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="store" value="1375" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>store</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite name="Composite TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Composite TC" searchProperties="true" id="c15aa11a-564c-495c-bf6a-d026a50369b7" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="properties" name="Trending - Composite DS"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>store</con:name><con:value>3200</con:value></con:property><con:property><con:name>Ignore</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="Trending - Composite"><con:settings/><con:config service="http://www.tgtappdata.com" resourcePath="/v1/products/trending-composite/{store}" methodName="Store" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="Trending - Composite" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v1/products/trending-composite/1375</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="store" value="${Trending - Composite DS#store}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>store</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="Trending - Composite GS" id="039a4491-36ed-49e1-9a07-a2b41e38247b"><con:settings/><con:config><script><![CDATA[import javax.swing.*;
import com.eviware.soapui.support.*
import groovy.json.JsonSlurper

servicePath = "/jenkins/Services/"
//servicePath = "C:/Target Automation/Services/"

String filename 
String errPath = servicePath + "Output/Errors/"
filename = errPath + "Failure.log" 
Boolean fileSuccessfullyDeleted = new File(filename).delete()
//--------------------------------------------------------------
validate_Populated_Response_Values( "Trending - Composite", "products" )
//--------------------------------------------------------------
File f = new File( filename );
if(f.exists()){
	String MainErrfilename = errPath + "All_Failures.html"
	String fileContent = ReadFile( filename )
	String [] arrValues = fileContent.split(",")
	String varLine, varLines
	varLines = ""
	if( fileContent.length() > 0 )
	{
		for( intArrayIndex = 0; intArrayIndex < arrValues.length; intArrayIndex++ )
		{
			varLine = arrValues[intArrayIndex]
			firstChar = varLine[0]
			if( firstChar == "~" ) varLines = varLines + "<hr>";
			if( firstChar == "~" || firstChar == "(" || firstChar == "[" )
			{
				varLine = varLine.substring( 1, varLine.length() );
			}
			switch(firstChar)
			{
				case "~":	varLine = "<a style='font-family:Candara;font-size:20px;color:Orange;'>" + varLine + "</a><br>"; break;
				case "(":	varLine = "<a style='font-family:Candara;font-size:15px;color:blue;'>" + varLine + "</a><br>"; break; 
				case "[":	varLine = "<a style='font-family:Candara;font-size:15px;color:purple;'>" + varLine + "</a><br>"; break;
				default: varLine = "<a style='font-family:Candara;font-size:15px;color:#005A1A;'>" + varLine + "</a><br>"; break;
			}
			varLines = varLines + varLine
		}
		AddTextToFile( MainErrfilename, varLines, true )
	}
}		
//=====================================================================================
public void validate_Populated_Response_Values( String var_Service, String var_Branch ) 
//=====================================================================================
{
	String testResult
	String dpci = "",
		  tcin = "",
		  storeId = "",
		  name = "",
		  price = "",
	 	  priceCurrency = "",
		  categoryId = "",
		  categoryName = "",
		  thumbUrl = ""

	String Ignore;
	String varLines = copyFileToArray( servicePath + "RedSky.srv", var_Service )
	//JOptionPane.showMessageDialog( null, "varLines: " + varLines );

	String [] testResultArray;	
	String [] arrLines = varLines.split("~")
	String [] arrColumns;
	String [] arrParams;
	String [] arrServiceValues;
		
	Integer iArrayColumnIndex;
	String varColumns, varColumn;
	String varValues, varValue; 
	String varParams, varParam;
	varValues = ""
	//---------------------------
	// Collect Columns and Values
	//---------------------------
	for( iArrayIndex = 0; iArrayIndex < arrLines.length-1; iArrayIndex++ )
	{
		varValue = arrLines[iArrayIndex]	
		if( iArrayIndex == 0 ) arrColumns = varValue.split(",");
		else if( iArrayIndex > 0) varValues = varValues + varValue + "~";
	}
	//JOptionPane.showMessageDialog( null, "arrColumns: " + arrColumns );
	//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
	varValues = varValues.substring(0, varValues.length() - 1 )
	//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
	arrServiceValues = varValues.split("~");
	//--------------------
	// Populate Parameters
	//--------------------
	WebServiceProps = testRunner.testCase.getTestStepByName( var_Service + " DS" );
	for( iArrayIndex = 0; iArrayIndex < arrServiceValues.length; iArrayIndex++ )
	{
		for( iArrayColumnIndex = 0; iArrayColumnIndex < arrColumns.length; iArrayColumnIndex++ )
		{
			varColumn = arrColumns[iArrayColumnIndex]
			varParams = arrServiceValues[iArrayIndex]
			arrParams = varParams.split(",")
			varParam = arrParams[iArrayColumnIndex]
			varParam = varParam.trim();
			switch(varColumn.trim())
			{
				case "store":
					WebServiceProps.setPropertyValue( "store", varParam );
					Store = WebServiceProps.getPropertyValue( "store" );
					break;
				case "Ignore":
					WebServiceProps.setPropertyValue( "Ignore", varParam );
					Ignore = WebServiceProps.getPropertyValue( "Ignore" );
					break;
			}
		}
		if( Ignore != "Y" )
		{
			//-----------------
			// Collect Response
			//-----------------
			testRunner.runTestStepByName(var_Service);
			String Response = testRunner.testCase.testSteps[ var_Service ].testRequest.response.contentAsString
			Response = Response.substring( 1, Response.length()-1 )
			if( Response.indexOf("HTTP Status 404 - Not Found") >=0 )
			{
				AddTextToFile( servicePath + "Output/Errors/Failure.log", "{" + var_Service + "} Store(" + Store + ") returned [HTTP Status 404 - Not Found]" , true )
			}
			//--------------------------
			// Collect Items to validate
			//--------------------------
			String var_Items = ReadFile( servicePath + "Trending Products/" + var_Branch + " - nodes to validate.txt" )
			def arr_Items = var_Items.split(",")
			Integer int_Index = 0
			def arr_subItem, var_Element, var_subItem_Type, subItemName, s_subItem, i_subItem, l_subItem
			//--------------------------------
			// Split JSON per specified Branch
			//--------------------------------
			Object result = new JsonSlurper().parseText( Response )
			Map jsonResult = (Map) result;
			List Branches = (List) jsonResult.get(var_Branch);
			Branches.each 
			{ 
				Branch ->
				//---------------------------------------
				// Loop through User defined check points
				//---------------------------------------
				while(int_Index < arr_Items.length )
				{
					//-----------------------------------------------------------
					// Collect Node Type (Integer, String or  List) and Node Name
					//-----------------------------------------------------------
					var_Element = arr_Items[int_Index].trim()
					arr_subItem = var_Element.split("_")
					var_subItem_Type = arr_subItem[0]
					subItemName = arr_subItem[1]
					int_Index = int_Index + 1
					//-----------------------------------
					// ignore reporting on specified Node
					//-----------------------------------
					if( var_Element[0] != "'" )
					{
						Object fieldValue = Branch.get(subItemName)
						if( subItemName == "dpci" ) dpci = fieldValue;
						if( subItemName == "tcin" ) tcin = fieldValue;
						if( subItemName == "storeId" ) storeId = fieldValue;
						if( subItemName == "name" ) name = fieldValue;
						if( subItemName == "price" ) price = fieldValue;
						if( subItemName == "priceCurrency" ) priceCurrency = fieldValue;
						if( subItemName == "categoryId" ) categoryId = fieldValue;
						if( subItemName == "categoryName" ) categoryName = fieldValue; 
						if( subItemName == "thumbUrl" ) thumbUrl = fieldValue;
		   			}
				}	
			   	testResult = CheckResponseValues(	dpci,
				  							tcin,
				 	 						storeId,
				  							name,
				  							price,
			 	  							priceCurrency,
				  							categoryId,
				  							categoryName,
				  							thumbUrl )
				if( testResult.length() > 0 )
		   		{
			   		testResultArray = testResult.split("~")
					AddTextToFile( servicePath + "Output/Errors/Failure.log", "~Service (" + var_Service + ")", true )
					for( intArrayIndex = 0; intArrayIndex < testResultArray.length; intArrayIndex++)
					{
						AddTextToFile( servicePath + "Output/Errors/Failure.log", testResultArray[intArrayIndex], true )
					}	
			   	}
				int_Index = 0;
			}
		}
	}		
}
//===========================================================================
public static void AddTextToFile( String sFile, String sText, boolean bAppend )
//===========================================================================
{
    	FileWriter fstream = new FileWriter( sFile, bAppend );
     BufferedWriter out = new BufferedWriter( fstream );
     out.write(sText);
     out.newLine();   
     out.close();
}
//===========================================
public static String ReadFile( String sFile )
//===========================================
{
    	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	
	String sLine, var_Lines, arr_Lines
	var_Lines = ""
    	sLine = reader.readLine()
  	while ( sLine != null ) 
    	{
	    	var_Lines = var_Lines + sLine + ","
	    	sLine = reader.readLine()
	} 
	var_Lines = var_Lines.substring(0, var_Lines.length() - 1 )
	return var_Lines 
}
//=================================================
String CheckResponseValues(	String dpci,
		  				String tcin,
		 	 			String storeId,
		  				String name,
		  				String price,
	 	  				String priceCurrency,
		  				String categoryId,
		  				String categoryName,
		  				String thumbUrl )
//=================================================
{
	String testResult = ""
	
	if( dpci == null ) testResult = testResult + "dpci must not be null~";
	if( tcin == null ) testResult = testResult + "tcin must not be null~";
	if( storeId == null ) testResult = testResult + "storeId must not be null~";
	if( name == null ) testResult = testResult + "name must not be null~";
	if( price == null ) testResult = testResult + "price must not be null~";
	if( priceCurrency == null ) testResult = testResult + "priceCurrency must not be null~";
	if( categoryId == null ) testResult = testResult + "categoryId must not be null~";
	if( categoryName == null ) testResult = testResult + "categoryName must not be null~";
	if( thumbUrl == null ) testResult = testResult + "thumbUrl must not be null";
	return testResult;
}
//==================================================================
public static String copyFileToArray( String sFile, String service )
//==================================================================
{
	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	String sLine, varLines, arrLines
	Boolean bCollect = false
	varLines = ""
    	sLine = reader.readLine()
    	sLine = sLine.trim();
  	while ( sLine != null ){
    		if( bCollect == true ) varLines = varLines + sLine + "~";
    		if( sLine == service ) bCollect = true;
    		if( bCollect == true && sLine[0] == "-" ) {bCollect = false;	break;}
	    	sLine = reader.readLine();
	    	sLine = sLine.trim();
	} 
	varLines = varLines.substring(0, varLines.length() - 1 )

	return varLines; 
}]]></script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>57734142-cb10-4d8c-9123-82fc7287b738</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>039a4491-36ed-49e1-9a07-a2b41e38247b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>
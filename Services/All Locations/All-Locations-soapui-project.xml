<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="All Locations" resourceRoot="" soapui-version="5.0.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://www.tgtappdata.com" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://www.tgtappdata.com</con:endpoint></con:endpoints><con:resource name="Version" path="/v2/stores/locations/{version}"><con:settings/><con:parameters><con:parameter><con:name>version</con:name><con:value>version</con:value><con:style>TEMPLATE</con:style><con:default>version</con:default><con:path xsi:nil="true"/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="All Locations" method="GET"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:ns="http://www.tgtappdata.com/v2/stores/locations/12">ns:Response</con:element></con:representation><con:representation type="FAULT"><con:mediaType>application/json</con:mediaType><con:status>404</con:status><con:params/><con:element xmlns:ns="http://www.tgtappdata.com/v2/stores/locations/12">ns:Fault</con:element></con:representation><con:request name="All Locations" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v2/stores/locations/12</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>version</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite name="All Locations TS"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="All Location TC" searchProperties="true" id="9d85b980-b0e4-4a32-9afb-a93438407fcd"><con:settings/><con:testStep type="properties" name="All Locations DS"><con:settings/><con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:properties><con:property><con:name>version</con:name><con:value>3</con:value></con:property><con:property><con:name>Ignore</con:name><con:value/></con:property></con:properties></con:config></con:testStep><con:testStep type="restrequest" name="All Locations"><con:settings/><con:config service="http://www.tgtappdata.com" resourcePath="/v2/stores/locations/{version}" methodName="All Locations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="All Locations" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v2/stores/locations/12</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="${All Locations DS#version}" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>version</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="groovy" name="All Locations GS"><con:settings/><con:config><script><![CDATA[import javax.swing.*;
import com.eviware.soapui.support.*
import groovy.json.JsonSlurper

servicePath = "/jenkins/Services/"
servicePath = "C:/Target Automation/Services/"

String filename 
String errPath = servicePath + "Output/Errors/"
filename = errPath + "Failure.log" 
Boolean fileSuccessfullyDeleted = new File(filename).delete()
//----------------------------------------------------------------
validate_Populated_Response_Values( "All Locations", "locations" )
//----------------------------------------------------------------
File f = new File( filename );
if(f.exists()){
	String MainErrfilename = errPath + "All_Failures.html"
	String fileContent = ReadFile( filename )
	String [] arrValues = fileContent.split(",")
	String varLine, varLines, firstChar
	varLines = ""
	if( fileContent.length() > 0 )
	{
		for( intArrayIndex = 0; intArrayIndex < arrValues.length; intArrayIndex++ )
		{
			varLine = arrValues[intArrayIndex];
			firstChar = varLine[0]
			if( firstChar == "~" ) varLines = varLines + "<hr>";
			if( firstChar == "~" || firstChar == "(" || firstChar == "[" )
			{
				varLine = varLine.substring( 1, varLine.length() );
			}
			switch(firstChar)
			{
				case "~":	varLine = "<a style='font-family:Candara;font-size:20px;color:Orange;'>" + varLine + "</a><br>"; break;
				case "(":	varLine = "<a style='font-family:Candara;font-size:15px;color:blue;'>" + varLine + "</a><br>"; break; 
				case "[":	varLine = "<a style='font-family:Candara;font-size:15px;color:purple;'>" + varLine + "</a><br>"; break;
				default: varLine = "<a style='font-family:Candara;font-size:15px;color:#005A1A;'>" + varLine + "</a><br>"; break;
			}
			varLines = varLines + varLine
		}
		AddTextToFile( MainErrfilename, varLines, true )
	}
}
//=====================================================================================
public void validate_Populated_Response_Values( String var_Service, String var_Branch ) 
//=====================================================================================
{
	try
	{
		String Ignore;
		String testResult
		String id = "", 
			  shortDisplayName = "", 
			  geoLocation = ""

		String varLines = copyFileToArray( servicePath + "RedSky.srv", var_Service )
		//JOptionPane.showMessageDialog( null, "varLines: " + varLines );

		String [] arrLines = varLines.split("~")
		String [] arrColumns;
		String [] arrParams;
		String [] arrServiceValues;
		
		Integer iArrayColumnIndex;
		String varColumns, varColumn;
		String varValues, varValue; 
		String varParams, varParam;

		varValues = ""
		//---------------------------
		// Collect Columns and Values
		//---------------------------
		for( iArrayIndex = 0; iArrayIndex < arrLines.length-1; iArrayIndex++ )
		{
			varValue = arrLines[iArrayIndex]	
			//JOptionPane.showMessageDialog( null, "varValue: " + varValue );
			if( iArrayIndex == 0 ) arrColumns = varValue.split(",");
			else if( iArrayIndex > 0) varValues = varValues + varValue + "~";
		}
		varValues = varValues.substring(0, varValues.length() - 1 )
		//JOptionPane.showMessageDialog( null, "varValues: " + varValues );
		arrServiceValues = varValues.split("~");
		//--------------------
		// Populate Parameters
		//--------------------
		WebServiceProps = testRunner.testCase.getTestStepByName( var_Service + " DS" );
		for( iArrayIndex = 0; iArrayIndex < arrServiceValues.length; iArrayIndex++ )
		{
			for( iArrayColumnIndex = 0; iArrayColumnIndex < arrColumns.length; iArrayColumnIndex++ )
			{
				varColumn = arrColumns[iArrayColumnIndex]
				varParams = arrServiceValues[iArrayIndex]
				arrParams = varParams.split(",")
				varParam = arrParams[iArrayColumnIndex]
				varParam = varParam.trim();
				switch(varColumn)
				{
					case "Ignore": 
						WebServiceProps.setPropertyValue( "Ignore", varParam );
						Ignore = WebServiceProps.getPropertyValue( "Ignore" );
						break;
					case "version":WebServiceProps.setPropertyValue( "version", varParam );break;
				}
			}
			if( Ignore != "Yes" )
			{ 
				//-----------------
				// Collect Response
				//-----------------
				testRunner.runTestStepByName(var_Service);
				String Response = testRunner.testCase.testSteps[ var_Service ].testRequest.response.contentAsString
				//--------------------------
				// Collect Items to validate
				//--------------------------
				String var_Items = ReadFile( servicePath + var_Service + "/" + var_Branch + " - nodes to validate.txt" )
				def arr_Items = var_Items.split(",")
				Integer int_Index = 0
				def arr_subItem, var_Element, var_subItem_Type, subItemName, s_subItem, i_subItem, l_subItem
				//--------------------------------
				// Split JSON per specified Branch
				//--------------------------------
				Object result = new JsonSlurper().parseText( Response )
				Map jsonResult = (Map) result;
				List Branches = (List) jsonResult.get(var_Branch);
				Branches.each 
				{ 
					Branch ->
					//---------------------------------------
					// Loop through User defined check points
					//---------------------------------------
					while(int_Index < arr_Items.length )
					{
						//-----------------------------------------------------------
						// Collect Node Type (Integer, String or  List) and Node Name
						//-----------------------------------------------------------
						var_Element = arr_Items[int_Index].trim()
						arr_subItem = var_Element.split("_")
						var_subItem_Type = arr_subItem[0]
						subItemName = arr_subItem[1]
						int_Index = int_Index + 1
						//-----------------------------------
						// ignore reporting on specified Node
						//-----------------------------------
						if( var_Element[0] != "'" )
						{
							Object fieldValue = Branch.get(subItemName)
							if( subItemName == "id" ) id = fieldValue;
							if( subItemName == "shortDisplayName" ) shortDisplayName = fieldValue;
							if( subItemName == "geoLocation" ) geoLocation = fieldValue;
			   			}
					}	
				   	testResult = CheckResponseValues( id, shortDisplayName, geoLocation )
					if( testResult.length() > 0 )
			   		{
				   		testResultArray = testResult.split("~")
						AddTextToFile( servicePath + "Output/Errors/Failure.log", "~Service (" + var_Service + ")", true )
						for( intArrayIndex = 0; intArrayIndex < testResultArray.length; intArrayIndex++)
						{
							AddTextToFile( servicePath + "Output/Errors/Failure.log", testResultArray[intArrayIndex], true )
						}	
				   	}
					int_Index = 0;
				}
			}
		}		
	}	
	catch(err)
	{
		JOptionPane.showMessageDialog( null, err.message );
	}
}
//===========================================================================
public static void AddTextToFile( String sFile, String sText, boolean bAppend )
//===========================================================================
{
    	FileWriter fstream = new FileWriter( sFile, bAppend );
     BufferedWriter out = new BufferedWriter( fstream );
     out.write(sText);
     out.newLine();   
     out.close();
}
//===========================================
public static String ReadFile( String sFile )
//===========================================
{
    	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	
	String sLine, var_Lines, arr_Lines
	var_Lines = ""
    	sLine = reader.readLine()
  	while ( sLine != null ) 
    	{
	    	var_Lines = var_Lines + sLine + ","
	    	sLine = reader.readLine()
	} 
	var_Lines = var_Lines.substring(0, var_Lines.length() - 1 )
	return var_Lines 
}
//==================================================================
public static String copyFileToArray( String sFile, String service )
//==================================================================
{
	File rfile = new File(sFile); 
    	BufferedReader reader = null; 
	reader = new BufferedReader(new FileReader(rfile));
	String sLine, varLines, arrLines
	Boolean bCollect = false
	varLines = ""
    	sLine = reader.readLine()
    	sLine = sLine.trim();
  	while ( sLine != null ){
    		if( bCollect == true ) varLines = varLines + sLine + "~";
    		if( sLine == service ) bCollect = true;
    		if( bCollect == true && sLine[0] == "-" ) {bCollect = false;	break;}
	    	sLine = reader.readLine();
	    	sLine = sLine.trim();
	} 
	varLines = varLines.substring(0, varLines.length() - 1 )

	return varLines; 
}
//================================================
String CheckResponseValues(	String id, 
					     String shortDisplayName, 
					     String geoLocation )
//================================================
{
	String testResult = ""
	try
	{
		if( id == null ) testResult = testResult + "id must not be null~";
		if( shortDisplayName == null ) testResult = testResult + "shortDisplayName must not be null~";
		if( geoLocation == null ) testResult = testResult + "geoLocation must not be null";
	}
	catch(err)
	{
		JOptionPane.showMessageDialog( null, err.message );
	}
	return testResult;
}]]></script></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>03a2bbba-c65f-49b5-a848-0c1df83fc2f4</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>87a6eb47-5f3f-44d4-999f-bd40c4fb697e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Load Test" searchProperties="true" disabled="true"><con:settings/><con:testStep type="restrequest" name="All Locations Load Test"><con:settings/><con:config service="http://www.tgtappdata.com" resourcePath="/v2/stores/locations/{version}" methodName="All Locations" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="All Locations Load Test" mediaType="application/json"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://www.tgtappdata.com</con:endpoint><con:request/><con:originalUri>http://www.tgtappdata.com/v2/stores/locations/12</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters><entry key="version" value="3" xmlns="http://eviware.com/soapui/config"/></con:parameters><con:parameterOrder><con:entry>version</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:loadTest name="All Location LoadTest"><con:settings><con:setting id="HttpSettings@close-connections">false</con:setting></con:settings><con:threadCount>11</con:threadCount><con:startDelay>0</con:startDelay><con:sampleInterval>250</con:sampleInterval><con:calculateTPSOnTimePassed>true</con:calculateTPSOnTimePassed><con:resetStatisticsOnThreadCountChange>true</con:resetStatisticsOnThreadCountChange><con:historyLimit>-1</con:historyLimit><con:testLimit>60</con:testLimit><con:limitType>TIME</con:limitType><con:loadStrategy><con:type>Simple</con:type></con:loadStrategy><con:assertion type="Step Status" name="Step Status"/><con:maxAssertionErrors>100</con:maxAssertionErrors><con:cancelExcessiveThreads>true</con:cancelExcessiveThreads><con:strategyInterval>500</con:strategyInterval></con:loadTest><con:properties/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>